{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState({\n    data: [],\n    nextPage: 0\n  });\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions({\n      data: [],\n      nextPage: 0\n    });\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"gErpO7LwsCIco2cFCY37wueoc7Q=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","data","nextPage","fetchAll","response","page","previousResponse","invalidateData"],"sources":["/Users/remingtonwilliams/Downloads/ramp-fe-challenge 2/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]>>({ data: [], nextPage: 0 })\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return previousResponse\n      }\n      if (previousResponse === null) {\n        return response\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions({ data: [], nextPage: 0 })\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAAmC;IAAEO,IAAI,EAAE,EAAR;IAAYC,QAAQ,EAAE;EAAtB,CAAnC,CAAlE;EAEA,MAAMC,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,MAAMW,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACG;IADnE,CAFmC,CAArC;IAOAF,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOE,gBAAP;MACD;;MACD,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOF,QAAP;MACD;;MAED,OAAO;QACLH,IAAI,EAAE,CAAC,GAAGK,gBAAgB,CAACL,IAArB,EAA2B,GAAGG,QAAQ,CAACH,IAAvC,CADD;QAELC,QAAQ,EAAEE,QAAQ,CAACF;MAFd,CAAP;IAID,CAZuB,CAAxB;EAaD,CArB2B,EAqBzB,CAACL,cAAD,EAAiBE,qBAAjB,CArByB,CAA5B;EAuBA,MAAMQ,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC;MAAEC,IAAI,EAAE,EAAR;MAAYC,QAAQ,EAAE;IAAtB,CAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAED,IAAI,EAAEF,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDI;EAAlD,CAAP;AACD;;GAhCeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}
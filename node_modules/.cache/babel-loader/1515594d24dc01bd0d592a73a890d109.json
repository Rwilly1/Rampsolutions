{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState({\n    data: [],\n    nextPage: 0\n  });\n  const fetchAll = useCallback(async () => {\n    // Don't fetch if there are no more pages\n    if (paginatedTransactions.nextPage === null) {\n      return;\n    }\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return previousResponse;\n      } // Create a map of existing transactions by ID to preserve approval states\n\n\n      const existingTransactionsMap = new Map(previousResponse.data.map(t => [t.id, t])); // Merge new transactions with existing ones, preserving approval states\n\n      const mergedTransactions = response.data.map(newTransaction => {\n        const existing = existingTransactionsMap.get(newTransaction.id);\n        return existing ? { ...newTransaction,\n          approved: existing.approved\n        } : newTransaction;\n      });\n      return {\n        data: [...previousResponse.data, ...mergedTransactions],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions({\n      data: [],\n      nextPage: 0\n    });\n  }, []);\n  const updateData = useCallback(data => {\n    setPaginatedTransactions(data);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    updateData\n  };\n}\n\n_s(usePaginatedTransactions, \"LNIxlJkMSwBOyHce8TgahoJmvwM=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","data","nextPage","fetchAll","response","page","previousResponse","existingTransactionsMap","Map","map","t","id","mergedTransactions","newTransaction","existing","get","approved","invalidateData","updateData"],"sources":["/Users/remingtonwilliams/Downloads/ramp-fe-challenge 2/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]>>({ data: [], nextPage: 0 })\n\n  const fetchAll = useCallback(async () => {\n    // Don't fetch if there are no more pages\n    if (paginatedTransactions.nextPage === null) {\n      return\n    }\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return previousResponse\n      }\n\n      // Create a map of existing transactions by ID to preserve approval states\n      const existingTransactionsMap = new Map(\n        previousResponse.data.map(t => [t.id, t])\n      )\n\n      // Merge new transactions with existing ones, preserving approval states\n      const mergedTransactions = response.data.map(newTransaction => {\n        const existing = existingTransactionsMap.get(newTransaction.id)\n        return existing ? { ...newTransaction, approved: existing.approved } : newTransaction\n      })\n\n      return {\n        data: [...previousResponse.data, ...mergedTransactions],\n        nextPage: response.nextPage\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions({ data: [], nextPage: 0 })\n  }, [])\n\n  const updateData = useCallback((data: PaginatedResponse<Transaction[]>) => {\n    setPaginatedTransactions(data)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, updateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAAmC;IAAEO,IAAI,EAAE,EAAR;IAAYC,QAAQ,EAAE;EAAtB,CAAnC,CAAlE;EAEA,MAAMC,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC;IACA,IAAIM,qBAAqB,CAACG,QAAtB,KAAmC,IAAvC,EAA6C;MAC3C;IACD;;IAED,MAAME,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,EAAEN,qBAAqB,CAACG;IAD9B,CAFmC,CAArC;IAOAF,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOE,gBAAP;MACD,CAH4C,CAK7C;;;MACA,MAAMC,uBAAuB,GAAG,IAAIC,GAAJ,CAC9BF,gBAAgB,CAACL,IAAjB,CAAsBQ,GAAtB,CAA0BC,CAAC,IAAI,CAACA,CAAC,CAACC,EAAH,EAAOD,CAAP,CAA/B,CAD8B,CAAhC,CAN6C,CAU7C;;MACA,MAAME,kBAAkB,GAAGR,QAAQ,CAACH,IAAT,CAAcQ,GAAd,CAAkBI,cAAc,IAAI;QAC7D,MAAMC,QAAQ,GAAGP,uBAAuB,CAACQ,GAAxB,CAA4BF,cAAc,CAACF,EAA3C,CAAjB;QACA,OAAOG,QAAQ,GAAG,EAAE,GAAGD,cAAL;UAAqBG,QAAQ,EAAEF,QAAQ,CAACE;QAAxC,CAAH,GAAwDH,cAAvE;MACD,CAH0B,CAA3B;MAKA,OAAO;QACLZ,IAAI,EAAE,CAAC,GAAGK,gBAAgB,CAACL,IAArB,EAA2B,GAAGW,kBAA9B,CADD;QAELV,QAAQ,EAAEE,QAAQ,CAACF;MAFd,CAAP;IAID,CApBuB,CAAxB;EAqBD,CAlC2B,EAkCzB,CAACL,cAAD,EAAiBE,qBAAjB,CAlCyB,CAA5B;EAoCA,MAAMkB,cAAc,GAAGxB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC;MAAEC,IAAI,EAAE,EAAR;MAAYC,QAAQ,EAAE;IAAtB,CAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,MAAMgB,UAAU,GAAGzB,WAAW,CAAEQ,IAAD,IAA4C;IACzED,wBAAwB,CAACC,IAAD,CAAxB;EACD,CAF6B,EAE3B,EAF2B,CAA9B;EAIA,OAAO;IAAEA,IAAI,EAAEF,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDc,cAAlD;IAAkEC;EAAlE,CAAP;AACD;;GAjDetB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}
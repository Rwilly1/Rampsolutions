{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const cacheKey = getCacheKey(endpoint, params);\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey); // For transactions, merge with approval cache\n\n    if (endpoint === 'paginatedTransactions' || endpoint === 'transactionsByEmployee') {\n      const result = await fakeFetch(endpoint, params);\n\n      if (result) {\n        const transactions = result;\n        const data = Array.isArray(transactions) ? transactions : transactions.data; // Get all approval states\n\n        const approvalCache = new Map();\n        cache === null || cache === void 0 ? void 0 : cache.current.forEach((value, key) => {\n          if (key.startsWith('transactionApproval@')) {\n            const [, transactionId] = key.split('@');\n            approvalCache.set(transactionId, JSON.parse(value));\n          }\n        }); // Apply cached approval states\n\n        const updatedData = data.map(transaction => {\n          const cachedApproval = approvalCache.get(transaction.id);\n          return cachedApproval !== undefined ? { ...transaction,\n            approved: cachedApproval\n          } : transaction;\n        });\n\n        if (Array.isArray(transactions)) {\n          cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(updatedData));\n          return updatedData;\n        } else {\n          const updatedResult = { ...transactions,\n            data: updatedData\n          };\n          cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(updatedResult));\n          return updatedResult;\n        }\n      }\n    }\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }), [cache, wrappedRequest]);\n  const fetchWithoutCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const result = await fakeFetch(endpoint, params); // Store approval state in cache\n\n    if (endpoint === 'setTransactionApproval' && params) {\n      const {\n        transactionId,\n        value\n      } = params;\n      cache === null || cache === void 0 ? void 0 : cache.current.set(`transactionApproval@${transactionId}`, JSON.stringify(value));\n    }\n\n    return result;\n  }), [cache, wrappedRequest]);\n  const clearCache = useCallback(() => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    cache.current = new Map();\n  }, [cache]);\n  const clearCacheByEndpoint = useCallback(endpointsToClear => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const cacheKeys = Array.from(cache.current.keys());\n\n    for (const key of cacheKeys) {\n      const clearKey = endpointsToClear.some(endpoint => key.startsWith(endpoint));\n\n      if (clearKey) {\n        cache.current.delete(key);\n      }\n    }\n  }, [cache]);\n  return {\n    fetchWithCache,\n    fetchWithoutCache,\n    clearCache,\n    clearCacheByEndpoint,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"j/MJvgyGdTYdw5q/fTHvRz37Zrc=\", false, function () {\n  return [useWrappedRequest];\n});\n\nfunction getCacheKey(endpoint, params) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`;\n}","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cache","loading","wrappedRequest","fetchWithCache","endpoint","params","cacheKey","getCacheKey","cacheResponse","current","get","result","transactions","data","Array","isArray","approvalCache","Map","forEach","value","key","startsWith","transactionId","split","set","JSON","parse","updatedData","map","transaction","cachedApproval","id","undefined","approved","stringify","updatedResult","fetchWithoutCache","clearCache","clearCacheByEndpoint","endpointsToClear","cacheKeys","from","keys","clearKey","some","delete"],"sources":["/Users/remingtonwilliams/Downloads/ramp-fe-challenge 2/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const cacheKey = getCacheKey(endpoint, params)\n        const cacheResponse = cache?.current.get(cacheKey)\n\n        // For transactions, merge with approval cache\n        if (endpoint === 'paginatedTransactions' || endpoint === 'transactionsByEmployee') {\n          const result = await fakeFetch<TData>(endpoint, params)\n          if (result) {\n            const transactions = result as any\n            const data = Array.isArray(transactions) ? transactions : transactions.data\n            \n            // Get all approval states\n            const approvalCache = new Map()\n            cache?.current.forEach((value, key) => {\n              if (key.startsWith('transactionApproval@')) {\n                const [, transactionId] = key.split('@')\n                approvalCache.set(transactionId, JSON.parse(value))\n              }\n            })\n\n            // Apply cached approval states\n            const updatedData = data.map((transaction: any) => {\n              const cachedApproval = approvalCache.get(transaction.id)\n              return cachedApproval !== undefined\n                ? { ...transaction, approved: cachedApproval }\n                : transaction\n            })\n\n            if (Array.isArray(transactions)) {\n              cache?.current.set(cacheKey, JSON.stringify(updatedData))\n              return updatedData as unknown as TData\n            } else {\n              const updatedResult = { ...transactions, data: updatedData }\n              cache?.current.set(cacheKey, JSON.stringify(updatedResult))\n              return updatedResult as unknown as TData\n            }\n          }\n        }\n\n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data as Promise<TData>\n        }\n\n        const result = await fakeFetch<TData>(endpoint, params)\n        cache?.current.set(cacheKey, JSON.stringify(result))\n        return result\n      }),\n    [cache, wrappedRequest]\n  )\n\n  const fetchWithoutCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const result = await fakeFetch<TData>(endpoint, params)\n        \n        // Store approval state in cache\n        if (endpoint === 'setTransactionApproval' && params) {\n          const { transactionId, value } = params as { transactionId: string; value: boolean }\n          cache?.current.set(`transactionApproval@${transactionId}`, JSON.stringify(value))\n        }\n        \n        return result\n      }),\n    [cache, wrappedRequest]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current === undefined) {\n      return\n    }\n\n    cache.current = new Map<string, string>()\n  }, [cache])\n\n  const clearCacheByEndpoint = useCallback(\n    (endpointsToClear: RegisteredEndpoints[]) => {\n      if (cache?.current === undefined) {\n        return\n      }\n\n      const cacheKeys = Array.from(cache.current.keys())\n\n      for (const key of cacheKeys) {\n        const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n        if (clearKey) {\n          cache.current.delete(key)\n        }\n      }\n    },\n    [cache]\n  )\n\n  return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n}\n\nfunction getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/remingtonwilliams/Downloads/ramp-fe-challenge 2/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions,\n    onTransactionUpdate\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    }); // Update the transaction in the list\n\n    if (transactions) {\n      const updatedTransactions = transactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n        approved: newValue\n      } : transaction); // Update the parent component's state\n\n      if (onTransactionUpdate) {\n        onTransactionUpdate(updatedTransactions);\n      }\n    }\n  }, [fetchWithoutCache, transactions, onTransactionUpdate]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"3TeCR/OJhEdaHp00JQf6jBdD3oc=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useCustomFetch","TransactionPane","Transactions","transactions","onTransactionUpdate","fetchWithoutCache","loading","setTransactionApproval","transactionId","newValue","value","updatedTransactions","map","transaction","id","approved"],"sources":["/Users/remingtonwilliams/Downloads/ramp-fe-challenge 2/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback } from \"react\"\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\"\nimport { SetTransactionApprovalParams } from \"src/utils/types\"\nimport { TransactionPane } from \"./TransactionPane\"\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\"\n\nexport const Transactions: TransactionsComponent = ({ transactions, onTransactionUpdate }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch()\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      })\n\n      // Update the transaction in the list\n      if (transactions) {\n        const updatedTransactions = transactions.map((transaction) =>\n          transaction.id === transactionId\n            ? { ...transaction, approved: newValue }\n            : transaction\n        )\n        // Update the parent component's state\n        if (onTransactionUpdate) {\n          onTransactionUpdate(updatedTransactions)\n        }\n      }\n    },\n    [fetchWithoutCache, transactions, onTransactionUpdate]\n  )\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAA2C;EAAA;;EAAA,IAA1C;IAAEC,YAAF;IAAgBC;EAAhB,CAA0C;EAC5F,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCN,cAAc,EAArD;EAEA,MAAMO,sBAAsB,GAAGR,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAES,aAAF;MAAiBC;IAAjB,CAAgC;IACrC,MAAMJ,iBAAiB,CAAqC,wBAArC,EAA+D;MACpFG,aADoF;MAEpFE,KAAK,EAAED;IAF6E,CAA/D,CAAvB,CADqC,CAMrC;;IACA,IAAIN,YAAJ,EAAkB;MAChB,MAAMQ,mBAAmB,GAAGR,YAAY,CAACS,GAAb,CAAkBC,WAAD,IAC3CA,WAAW,CAACC,EAAZ,KAAmBN,aAAnB,GACI,EAAE,GAAGK,WAAL;QAAkBE,QAAQ,EAAEN;MAA5B,CADJ,GAEII,WAHsB,CAA5B,CADgB,CAMhB;;MACA,IAAIT,mBAAJ,EAAyB;QACvBA,mBAAmB,CAACO,mBAAD,CAAnB;MACD;IACF;EACF,CAnBuC,EAoBxC,CAACN,iBAAD,EAAoBF,YAApB,EAAkCC,mBAAlC,CApBwC,CAA1C;;EAuBA,IAAID,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGA,YAAY,CAACS,GAAb,CAAkBC,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEP,OAHX;MAIE,sBAAsB,EAAEC;IAJ1B,GACOM,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA1CM;;GAAMZ,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}